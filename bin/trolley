#!/usr/bin/env python

import os
import subprocess
import shlex
import urllib
import urllib2
import json
import re
import glob

try:
  import argparse
except Exception, e:
  print 'Installing setuptools for Python'
  setuptools = 'curl -skL https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py'
  p1 = subprocess.Popen(setuptools,
                        shell=True,
                        stdout=subprocess.PIPE)
  p2 = subprocess.Popen('python && easy_install argparse', stdin=p1.stdout, shell=True)
  p2.wait()
  exit('Please run trolley again')

__version__   = '0.1.11'
addons_host   = 'http://boxcar-addons-staging.herokuapp.com'
packages_host = 'http://slackware.cs.utah.edu/pub/slackware/'
tags_url      = 'https://api.github.com/repos/nicinabox/trolley/tags'
slackware_versions = [14.0, 13.37, 13.1]

class DummyArgs: pass

def _get(url):
  response = urllib2.urlopen(url)
  return json.load(response)

def _command_exists(command):
  try:
    subprocess.call(['which', command], stdout=subprocess.PIPE)
    return True
  except:
    return False

def _package_installed(name, version):
  return bool(_list_packages(name, version))

def _raw_installed_packages():
  return os.listdir('/var/log/packages/')

def _list_packages(name, version=''):
  def _parse_package_name_and_version(package_str):
    packages = []

    official_matches = re.findall("(.+)-(.+)-(.+)-(.+)", package_str)
    unofficial_matches = re.findall("(.+)-(.+)", package_str)

    if official_matches:
      # [name, version]
      packages = [official_matches[0][0], official_matches[0][1]]

    elif unofficial_matches:
      # [name, version]
      packages = [unofficial_matches[0][0], unofficial_matches[0][1]]

    return packages

  def _filter_packages(info, collection):
    packages = []
    for p in collection:
      package_candidate = []

      if info['name'].lower() in p[0].lower():
        package_candidate = p

        if info['version']:
          query_version = tuple([d for d in info['version'].split('.')])
          match_version = tuple([d for d in p[1].split('.')])
          length = len(query_version)

          if query_version != match_version[:length]:
            package_candidate = []

        if package_candidate:
          packages.append(package_candidate)

    return packages

  all_packages = _raw_installed_packages()
  packages = filter(None, map(_parse_package_name_and_version, all_packages))

  if name or version:
    packages = _filter_packages({ "name": name, "version": version }, packages)

  return sorted(packages, key=lambda package: package[0])

def _wget(url, options=''):
  cmd = 'wget {0} {1}'.format(options, url)
  subprocess.call(shlex.split(cmd))

def _installpkg(name):
  if _command_exists('installpkg'):
    subprocess.call(['installpkg', name])

def _removepkg(name):
  if _command_exists('removepkg'):
    subprocess.call(['removepkg', name])

def _get_package_data(name, version=''):
  packages_url = addons_host + '/packages/' + name

  if version:
    packages_url += '/' + urllib.quote(version)

  package = _get(packages_url)

  if not package:
    exit("No package named '" + name + "'")

  if not version:
    package = package[0]

  return package

def _check_for_packages_json():
  try:
    f = open('packages.json')
    packages = json.load(f)
    f.close()
  except Exception, e:
    exit('No packages.json found')

  for package in packages:
    args         = DummyArgs()
    args.name    = package
    args.version = packages[package]
    args.verbose = False

    install(args)

def install(args):
  if args.name:
    if 'http' in args.name:
      package = {
        "url": args.name,
        "package_name": os.path.basename(args.name),
        "name": re.sub("\.\w{3}", "", os.path.basename(args.name)),
        "version": ''
      }
    else:
      package = _get_package_data(args.name, args.version)

    if not _package_installed(package['name'], package['version']):
      print "Downloading {0} {1}".format(package['name'], package['version'])
      wget_options = '--no-check-certificate -P /boot/extra'

      if not args.verbose:
        wget_options += ' -q'

      if 'url' in package:
        _wget(package['url'], wget_options)
      else:
        _wget(packages_host + package['path'], wget_options)

      _installpkg('/boot/extra/' + package['package_name'])
    else:
      print 'Using {0} ({1})'.format(package['name'], package['version'])

  else:
    _check_for_packages_json()

def remove(args):
  packages = _list_packages(args.name, args.version)
  for package in packages:
    globbed_name = glob.glob('/boot/extra/{0}-{1}*'.format(package[0], package[1]))
    pkg_fullname = os.path.basename(globbed_name[0])
    cmd = 'rm /boot/extra/{0}'.format(pkg_fullname)

    subprocess.Popen(shlex.split(cmd),
                     stderr=open('/dev/null', 'w'))

    _removepkg(pkg_fullname)

    print 'Removed {0} {1}'.format(package[0], package[1])

def search(args):
  query = urllib.quote(args.name)
  packages = _get(addons_host + '/packages/search?q=' + query)

  if packages:
    if packages:
      for p in packages:
        print '{0}'.format(p['summary'])
        for i, v in enumerate(p['versions']):
          print '  Slackware {0}: {1}'.format(slackware_versions[i], v)

        print ''

def installed_packages(args):
  packages = _list_packages(args.name, args.version)

  for package in packages:
    print "{0} ({1})".format(package[0], package[1])

def info(args):
  package = _get_package_data(args.name, args.version)

  print """Name:       {0}
Version:    {1}
Arch:       {2}
Build:      {3}
Size:       {4} compressed ({5} uncompressed)
Path:       {6}
Slackware:  {7}""".format( package['name'],
                           package['version'],
                           package['arch'],
                           package['build'],
                           package['size_compressed'],
                           package['size_uncompressed'],
                           package['path'],
                           package['slackware_version'])

def update(args):
  tags = _get(tags_url)

  if tags[0]['name'] <= __version__:
    exit('Already on ' + __version__)

  installer = shlex.split('wget -q -O - --no-check-certificate https://raw.github.com/nicinabox/trolley/master/install.sh')
  executer  = shlex.split('sh -')
  p0 = subprocess.Popen(installer, stdout=subprocess.PIPE)
  subprocess.Popen(executer, stdin=p0.stdout, stdout=subprocess.PIPE)

def main():
  arger = argparse.ArgumentParser(description="A simple package tool for Slackware, designed for unRAID")
  subparsers = arger.add_subparsers(dest="command")


  arger.add_argument('-V', '--version',
                      action="version",
                      version='%(prog)s ' + __version__,
                      help="Show version")

  # Install
  install_parser = subparsers.add_parser("install", help="Install a package by name. If no name specified, looks for packages.json in current directory")
  install_parser.add_argument('name', nargs="?")
  install_parser.add_argument('version', nargs="?")
  install_parser.add_argument('-v', '--verbose', action="store_true")
  install_parser.set_defaults(func=install)

  # Info
  info_parser = subparsers.add_parser("info", help="Get info about a package")
  info_parser.add_argument('name')
  info_parser.add_argument('version', nargs="?")
  info_parser.set_defaults(func=info)

  # Remove
  remove_parser = subparsers.add_parser("remove", help="Remove installed package by name")
  remove_parser.add_argument('name')
  remove_parser.add_argument('version', nargs="?")
  remove_parser.set_defaults(func=remove)

  # List
  list_parser = subparsers.add_parser("list", help="List installed packages")
  list_parser.add_argument('name', nargs="?")
  list_parser.add_argument('version', nargs="?")
  list_parser.set_defaults(func=installed_packages)

  # Search
  search_parser = subparsers.add_parser("search", help="Find a package by name")
  search_parser.add_argument('name')
  search_parser.set_defaults(func=search)

  # Update
  update_parser = subparsers.add_parser("update", help="Update %(prog)s")
  update_parser.set_defaults(func=update)

  # Parse
  args = arger.parse_args()
  args.func(args)

if __name__ == '__main__': main()
