#!/usr/bin/env python

import os
import sys
import subprocess
import shlex
import urllib2
import json

try:
  import argparse
except Exception, e:
  print 'Installing setuptools for Python'
  setuptools = 'curl -skL https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py | python'
  subprocess.call(shlex.split(setuptools),
                  shell=True,
                  stdout=subprocess.PIPE,
                  stderr=subprocess.STDOUT)
  subprocess.call(['easy_install', 'argparse'])
  exit('Please run %(prog)s again')

__version__   = '0.1.3'
addons_host   = 'http://boxcar-addons-staging.herokuapp.com'
packages_host = 'http://slackware.cs.utah.edu/pub/slackware/'
tags_url      = 'https://api.github.com/repos/nicinabox/trolley/tags'

class DummyArgs: pass

def _get(url):
  response = urllib2.urlopen(url)
  return json.load(response)

def _command_exists(command):
  proc = subprocess.Popen(['command', '-v', command],
                          stdout=subprocess.PIPE)
  return bool(proc.stdout.read())

def _wget(url):
  subprocess.call(['wget', '-q', url])

def _installpkg(name):
  if _command_exists('installpkg'):
    subprocess.call(['installpkg', name])

def _removepkg(name):
  if _command_exists('removepkg'):
    subprocess.call(['removepkg', name])

def _get_package_data(name, version=''):
  packages_url = addons_host + '/packages/' + name

  if version:
    packages_url += '/' + version

  package = _get(packages_url)

  if not package:
    exit("No package named '" + name + "'")

  if not version:
    package = package[0]

  return package

def _check_for_packages_json():
  try:
    f = open('packages.json')
    packages = json.load(f)
    f.close()
  except Exception, e:
    exit('No packages.json found')

  for package in packages:
    args         = DummyArgs()
    args.name    = package
    args.version = packages[package]

    install(args)

def install(args):
  if args.name:
    print "Getting package data"
    package = _get_package_data(args.name, args.version)

    print "Downloading " + package['name']
    _wget(packages_host + package['path'])
    _installpkg(package['package_name'])
  else:
    _check_for_packages_json()

def remove(args):
  _removepkg(args.name)

def search(args):
  packages = _get(addons_host + '/packages/search?q=' + args.name)

  if packages:
    print "Package Name (Slackware 14.0, 13.37, 13.1)"
    print "=========================================="
    if packages:
      for p in packages:
        print '{0} ({1})'.format(p['name'], ', '.join(p['versions']))

def list_packages(args):
  installed_packages = os.listdir('/var/log/packages/')
  for package in installed_packages:
    print package

def info(args):
  package = _get_package_data(args.name, args.version)

  print """Name:       {0}
Version:    {1}
Arch:       {2}
Build:      {3}
Size:       {4} compressed ({5} uncompressed)
Path:       {6}
Slackware:  {7}""".format( package['name'],
                           package['version'],
                           package['arch'],
                           package['build'],
                           package['size_compressed'],
                           package['size_uncompressed'],
                           package['path'],
                           package['slackware_version'])

def update(args):
  tags = _get(tags_url)

  target        = 'trolley.txz'
  extracted_dir = 'nicinabox-trolley-{0}'.format(tags[0]['commit']['sha'][:7])

  cmds = {
    'wget':       'wget --no-check-certificate -q {0} -O {1}.tar.gz'.format(tags[0]['tarball_url'], tags[0]['name']),
    'untar':      'tar xzf {0}.tar.gz'.format(tags[0]['name']),
    'makepkg':    'cd {0} && makepkg -c y ../{1}'.format(extracted_dir, target),
    'installpkg': 'installpkg {0}'.format(target),
    'cleanup':    'rm -rf {0} {1}.tar.gz'.format(extracted_dir, tags[0]['name'])
  }

  for cmd in cmds:
    args = shlex.split(cmds[cmd])
    subprocess.call(args)

def main():
  arger = argparse.ArgumentParser(description="A simple package tool for Slackware, designed for unRAID")
  subparsers = arger.add_subparsers(dest="command")

  arger.add_argument('-v', '--version',
                      action="version",
                      version='%(prog)s ' + __version__,
                      help="Show version")

  # Install
  install_parser = subparsers.add_parser("install", help="Install a package by name. If no name specified, looks for packages.json in current directory")
  install_parser.add_argument('name', nargs="?")
  install_parser.add_argument('version', nargs="?")
  install_parser.set_defaults(func=install)

  # Info
  install_parser = subparsers.add_parser("info", help="Get info about a package")
  install_parser.add_argument('name')
  install_parser.add_argument('version', nargs="?")
  install_parser.set_defaults(func=info)

  # Remove
  remove_parser = subparsers.add_parser("remove", help="Remove installed package by name")
  remove_parser.add_argument('name')
  remove_parser.set_defaults(func=remove)

  # List
  list_parser = subparsers.add_parser("list", help="List installed packages")
  list_parser.set_defaults(func=list_packages)

  # Search
  search_parser = subparsers.add_parser("search", help="Find a package by name")
  search_parser.add_argument('name')
  search_parser.set_defaults(func=search)

  # Update
  update_parser = subparsers.add_parser("update", help="Update %(prog)s")
  update_parser.set_defaults(func=update)

  # Parse
  args = arger.parse_args()
  args.func(args)

if __name__ == '__main__': main()
